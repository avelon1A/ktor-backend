name: Build Docker Image and Deploy API

on:
  push:
    branches:
      - master  # Trigger on push to master for Docker build
      - main    # Trigger on push to main for Spring API deployment
  pull_request:
    branches:
      - master
      - main

jobs:
  # Job 1: Build Docker Image and Retrieve Artifact
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 for the Gradle build
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      # Step 3: Set up Gradle Cache to speed up build (optional)
      - name: Set up Gradle Cache
        uses: gradle/action-build-cache@v2
        with:
          cache-version: 1

      # Step 4: Build the project using Gradle
      - name: Build the project using Gradle
        run: |
          ./gradlew build

      # Step 5: Check if the JAR file exists after the build process
      - name: Check if JAR file exists
        run: |
          echo "Checking if the JAR file exists..."
          if [ -f "build/libs/testcoverage-all.jar" ]; then
            echo "JAR file found: build/libs/testcoverage-all.jar"
          else
            echo "JAR file not found!"
            exit 1
          fi

      # Step 6: Upload the JAR file as an artifact (if exists)
      - name: Upload artifact (JAR file)
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: testcoverage-jar
          path: build/libs/testcoverage-all.jar

      # Step 7: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 8: Build the Docker image
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t testcoverage:latest .
          docker images

      # Step 9: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 10: Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker tag testcoverage:latest ${{ secrets.DOCKER_HUB_USERNAME }}/testcoverage:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/testcoverage:latest

  # Job 2: Build and Deploy Spring API
  build-deploy:
    runs-on: ubuntu-20.04
    needs: build  # Make sure the Docker image build job is completed first

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17 for the Maven build
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      # Step 3: Run unit tests with Maven
      - name: Run unit tests
        run: mvn -B test --file pom.xml

      # Step 4: Build the Spring application using Maven
      - name: Build the Spring app
        run: |
          mvn clean
          mvn -B package --file pom.xml

      # Step 5: Build the Docker image for the Spring API
      - name: Build Docker image for Spring API
        uses: docker/build-push-action@v4
        with:
          context: .
          dockerfile: Dockerfile
          push: false  # Don't push yet
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/rest-api:latest

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Step 7: Push the Docker image for the Spring API to Docker Hub
      - name: Push Docker image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          dockerfile: Dockerfile
          push: true  # Push the image to Docker Hub
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/rest-api:latest
