name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Ensure gradlew is executable
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Check if JAR file exists
        run: |
         echo "Checking if the JAR file exists..."
         if [ -f "build/libs/testcoverage-all.jar" ]; then
          echo "JAR file found: build/libs/testcoverage-all.jar"
         else
          echo "JAR file not found!"
          exit 1
         fi

      - name: Upload artifact (JAR file)
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: testcoverage-jar
          path: build/libs/testcoverage-all.jar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          echo "Building Docker image for Ktor app..."
          docker build -t testcoverage:latest .
          docker images

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker tag testcoverage:latest ${{ secrets.DOCKER_HUB_USERNAME }}/testcoverage:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/testcoverage:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure build job is successful before deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull Docker image from Docker Hub
        run: |
          echo "Pulling Docker image from Docker Hub..."
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/testcoverage:latest

      - name: Run Docker container (deployment)
        run: |
          echo "Running Docker container for Ktor app..."
          docker run -d -p 8080:8080 --name testcoverage-container ${{ secrets.DOCKER_HUB_USERNAME }}/testcoverage:latest

      - name: Copy files from Docker container
        run: |
          echo "Copying files from Docker container..."
          docker cp testcoverage-container:/path/to/file/on/container /path/to/local/destination
          
          # For example, copying logs or other generated files
          # docker cp testcoverage-container:/app/logs/my-log.log ./my-log.log

      - name: Stop and remove Docker container
        run: |
          echo "Stopping and removing Docker container..."
          docker stop testcoverage-container
          docker rm testcoverage-container